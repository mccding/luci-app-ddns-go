# 工作流名称
name: Build-ImmortalWrt-IPK-from-Source

on:
  # 允许手动触发
  workflow_dispatch:
    inputs:
      profile:
        type: choice
        description: '请选择您的设备型号 (用于配置编译环境)'
        options:
          - friendlyarm_nanopi-r2s
          - friendlyarm_nanopi-r4s
          - friendlyarm_nanopi-r5s
          - friendlyarm_nanopi-r6s
          - xunlong_orangepi-5
          - xunlong_orangepi-5-plus
          - radxa_rock-5b
          # 你可以在这里添加更多你关心的 rockchip armv8 设备
        required: true
        default: 'friendlyarm_nanopi-r4s'
      package_repo:
        description: '要编译的插件 Git 仓库地址'
        required: true
        default: 'https://github.com/sirpdboy/luci-app-ddns-go'
      package_name:
        description: 'LuCI 插件包名 (通常是 luci-app-xxx)'
        required: true
        default: 'luci-app-ddns-go'
      immortalwrt_branch_or_tag:
        description: '要编译的 ImmortalWrt Git 分支或标签'
        required: true
        default: 'openwrt-23.05'

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
          gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev \
          file wget python3-pip
          sudo pip3 install pyelftools

      - name: Cache build environment
        uses: actions/cache@v4
        with:
          path: |
            ~/immortalwrt/staging_dir
            ~/immortalwrt/toolchain
            ~/immortalwrt/tmp
            ~/immortalwrt/dl
          key: ${{ runner.os }}-immortalwrt-${{ inputs.immortalwrt_branch_or_tag }}-${{ inputs.profile }}

      - name: Clone ImmortalWrt source code
        run: |
          set -e
          if [ -d "~/immortalwrt" ]; then
            echo "Removing existing immortalwrt directory"
            rm -rf ~/immortalwrt
          fi
          echo "Cloning ImmortalWrt source..."
          git clone https://github.com/immortalwrt/immortalwrt.git -b ${{ inputs.immortalwrt_branch_or_tag }} --depth 1 ~/immortalwrt
          
      - name: Setup feeds and clone custom package
        working-directory: ~/immortalwrt
        run: |
          set -e
          # 更新默认 feeds
          echo "Updating and installing feeds..."
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          # 克隆插件仓库
          echo "Cloning custom package repository..."
          git clone ${{ inputs.package_repo }} package/custom_repo
          
          # sirpdboy/luci-app-ddns-go 仓库包含两个包，需要分别复制
          echo "Copying package files..."
          if [ -d "package/custom_repo/ddns-go" ] && [ -d "package/custom_repo/luci-app-ddns-go" ]; then
            echo "Detected ddns-go and luci-app-ddns-go sub-packages."
            cp -r package/custom_repo/ddns-go package/
            cp -r package/custom_repo/luci-app-ddns-go package/
          else
            # 对于单包仓库的通用处理
            echo "Detected a single package repository."
            cp -r package/custom_repo package/${{ inputs.package_name }}
          fi
          
          rm -rf package/custom_repo
          echo "Final package structure check:"
          ls -l package | grep 'ddns-go'

      - name: Configure build target
        working-directory: ~/immortalwrt
        run: |
          set -e
          # 创建配置文件
          echo "CONFIG_TARGET_rockchip=y" > .config
          echo "CONFIG_TARGET_rockchip_armv8=y" >> .config
          echo "CONFIG_TARGET_rockchip_armv8_DEVICE_${{ inputs.profile }}=y" >> .config
          
          # 添加包到编译配置 (M表示编译成模块, 即ipk)
          echo "CONFIG_PACKAGE_ddns-go=m" >> .config
          echo "CONFIG_PACKAGE_${{ inputs.package_name }}=m" >> .config
          
          # 生成完整的配置文件
          make defconfig

      - name: Verify configuration
        working-directory: ~/immortalwrt
        run: |
          echo "Verifying .config file..."
          if grep -q "CONFIG_PACKAGE_ddns-go=m" .config && grep -q "CONFIG_PACKAGE_${{ inputs.package_name }}=m" .config; then
            echo "✅ Packages are correctly selected in .config."
          else
            echo "❌ Packages were not found in .config. Exiting."
            cat .config | grep 'ddns-go'
            exit 1
          fi

      - name: Download dependencies
        working-directory: ~/immortalwrt
        run: |
          set -e
          echo "Downloading toolchain and dependencies..."
          make download -j$(nproc)

      - name: Compile the packages
        working-directory: ~/immortalwrt
        run: |
          set -e
          echo "Starting compilation... This may take a while."
          # -j1 V=s 用于输出详细日志，方便调试。第一次编译或调试时建议使用
          # 成功后可以换成 -j$(nproc) V=s 以加快速度
          make -j$(nproc) V=s
      
      - name: Organize IPK packages
        id: organize_ipk
        run: |
          set -e
          echo "Organizing compiled IPK files..."
          mkdir -p /tmp/ipk_files
          
          # IPK 文件通常在 bin/packages/{arch}/base 或其他自定义 feed 目录
          find ~/immortalwrt/bin/packages/ -type f -name "*.ipk" -exec cp {} /tmp/ipk_files/ \;

          echo "Found IPK files:"
          ls -l /tmp/ipk_files/
          
          if [ -z "$(ls -A /tmp/ipk_files/)" ]; then
            echo "No IPK files found after compilation."
            # 创建一个调试文件
            echo "编译完成，但未找到任何 IPK 文件。请检查编译日志以确定失败原因。" > /tmp/ipk_files/build_failed.txt
          fi

      - name: Upload IPK to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "ipk-${{ inputs.package_name }}-${{ inputs.profile }}-${{ github.run_number }}"
          name: "ImmortalWrt - ${{ inputs.package_name }} (${{ inputs.profile }}) #${{ github.run_number }}"
          body: |
            **自动编译生成的 IPK 插件包**
            
            - **ImmortalWrt 版本:** `${{ inputs.immortalwrt_branch_or_tag }}`
            - **目标设备:** `${{ inputs.profile }}`
            - **插件仓库:** `${{ inputs.package_repo }}`
            
            **安装说明:**
            将 `.ipk` 文件上传到路由器后执行 `opkg install *.ipk`
          files: /tmp/ipk_files/*
          prerelease: false
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
